[{"/Users/tomas/Documents/GitHub/test-planet-soft/src/index.js":"1","/Users/tomas/Documents/GitHub/test-planet-soft/src/App.js":"2","/Users/tomas/Documents/GitHub/test-planet-soft/src/reportWebVitals.js":"3","/Users/tomas/Documents/GitHub/test-planet-soft/src/redux/reducers.js":"4","/Users/tomas/Documents/GitHub/test-planet-soft/src/pages/Login/index.js":"5","/Users/tomas/Documents/GitHub/test-planet-soft/src/pages/Users/index.js":"6","/Users/tomas/Documents/GitHub/test-planet-soft/src/pages/Users/Users.jsx":"7","/Users/tomas/Documents/GitHub/test-planet-soft/src/pages/Login/Login.jsx":"8","/Users/tomas/Documents/GitHub/test-planet-soft/src/redux/actions.js":"9","/Users/tomas/Documents/GitHub/test-planet-soft/src/redux/selectors.js":"10","/Users/tomas/Documents/GitHub/test-planet-soft/src/hooks/useFormattedData.js":"11","/Users/tomas/Documents/GitHub/test-planet-soft/src/api/index.js":"12"},{"size":855,"mtime":1652134210989,"results":"13","hashOfConfig":"14"},{"size":369,"mtime":1652041795000,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1651339296000,"results":"16","hashOfConfig":"14"},{"size":973,"mtime":1652134158804,"results":"17","hashOfConfig":"14"},{"size":50,"mtime":1651930195000,"results":"18","hashOfConfig":"14"},{"size":50,"mtime":1651786506000,"results":"19","hashOfConfig":"14"},{"size":16990,"mtime":1652134124446,"results":"20","hashOfConfig":"14"},{"size":2804,"mtime":1652134016111,"results":"21","hashOfConfig":"14"},{"size":185,"mtime":1652130812943,"results":"22","hashOfConfig":"14"},{"size":863,"mtime":1652130826910,"results":"23","hashOfConfig":"14"},{"size":827,"mtime":1652131336940,"results":"24","hashOfConfig":"14"},{"size":146,"mtime":1652130436458,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tdehxv",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/tomas/Documents/GitHub/test-planet-soft/src/index.js",[],[],"/Users/tomas/Documents/GitHub/test-planet-soft/src/App.js",[],[],[],"/Users/tomas/Documents/GitHub/test-planet-soft/src/reportWebVitals.js",[],[],"/Users/tomas/Documents/GitHub/test-planet-soft/src/redux/reducers.js",[],[],"/Users/tomas/Documents/GitHub/test-planet-soft/src/pages/Login/index.js",[],[],"/Users/tomas/Documents/GitHub/test-planet-soft/src/pages/Users/index.js",[],[],"/Users/tomas/Documents/GitHub/test-planet-soft/src/pages/Users/Users.jsx",["64"],[],"import React, { useEffect, useState } from 'react';\nimport instance from '../../api';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Container, Row, Col, Table, Button, Stack, Modal, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userAction } from '../../redux/actions';\nimport { addModalUserSelector, deleteModalUserSelector, descriptionUserSelector, editModalUserSelector, emailUserSelector, firstNameUserSelector, genderUserSelector, idUserSelector, lastNameUserSelector } from '../../redux/selectors';\nimport { useNavigate } from 'react-router-dom';\n\nimport useFormattedData from '../../hooks/useFormattedData';\nimport usersData from './usersData.json';\n\nconst Users = () => {\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const [users, setUser] = useState([]);\n    const [usersLoading, setUserLoading] = useState(true);\n\n    const idUser = useSelector(idUserSelector);\n    const firstNameUser = useSelector(firstNameUserSelector);\n    const lastNameUser = useSelector(lastNameUserSelector);\n    const emailUser = useSelector(emailUserSelector);\n    const genderUser = useSelector(genderUserSelector);\n    const descriptionUser = useSelector(descriptionUserSelector);\n    const addModalUser = useSelector(addModalUserSelector);\n    const editModalUser = useSelector(editModalUserSelector);\n    const deleteModalUser = useSelector(deleteModalUserSelector);\n\n    const handleSubmit = async (event) => {\n\n        event.preventDefault();\n\n        const userData = {\n            id: uuidv4(),\n            first_name: firstNameUser,\n            last_name: lastNameUser,\n            email: emailUser,\n            gender: genderUser,\n            description: descriptionUser\n        };\n\n        try {\n            await instance.post(\"/users\", userData);\n        }\n        catch (error) {\n            console.error(error.message);\n        }\n        finally {\n            window.location.reload();\n        }\n    };\n\n    const getUser = async () => {\n        try {\n            const response = await instance.get('/users');\n            setUser(response.data);\n        }\n        catch (error) {\n            console.error(error.message);\n        }\n        finally {\n            setUserLoading(false)\n        }\n    };\n\n    useEffect(() => {\n        getUser();\n    }, []);\n\n    const handleUpdate = async () => {\n\n        const userData = {\n            first_name: firstNameUser,\n            last_name: lastNameUser,\n            email: emailUser,\n            gender: genderUser,\n            description: descriptionUser\n        };\n\n        try {\n            await instance.put(`/users/${idUser}`, userData);\n        }\n        catch (error) {\n            console.error(error.message);\n        }\n        finally {\n            window.location.reload();\n        }\n    };\n\n    const handleDelete = async () => {\n        try {\n            await instance.delete(`/users/${idUser}`);\n        }\n        catch (error) {\n            console.error(error.message);\n        }\n        finally {\n            window.location.reload();\n        }\n    };\n\n    const { formatted, search, sortBy } = useFormattedData(usersData);\n\n    useEffect(() => {\n        sortBy(\"last_name\");\n        search(\"Eliot\");\n        console.log('formatted', formatted)\n    }, []);\n\n    return (\n        <div className='my-4'>\n            <Container fluid>\n                <Row>\n                    <Col sm={12} lg={8}>\n                        <h1>Users list</h1>\n                    </Col>\n                    <Col sm={12} lg={2} className=\"my-2\">\n                        <Button\n                            className='w-100'\n                            variant=\"secondary\"\n                            onClick={() => navigate('/login')}\n                        >\n                            Login page\n                        </Button>\n                    </Col>\n                    <Col sm={12} lg={2} className=\"my-2\">\n                        <Button\n                            className='w-100'\n                            variant=\"secondary\"\n                            onClick={() => dispatch(userAction({ addModal: !addModalUser }))}\n                        >\n                            Add user\n                        </Button>\n                    </Col>\n                </Row>\n                <hr />\n                <Row>\n                    <Col>\n                        <Table striped bordered hover responsive>\n                            <thead>\n                                <tr>\n                                    <th>Options</th>\n                                    <th>ID</th>\n                                    <th>First Name</th>\n                                    <th>Last Name</th>\n                                    <th>Email</th>\n                                    <th>Gender</th>\n                                    <th>Description</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {!usersLoading && users.map((item) =>\n                                    <tr key={item.id}>\n                                        <td>\n                                            <Stack direction=\"horizontal\" gap={2}>\n                                                <Button\n                                                    variant=\"primary\"\n                                                    onClick={() => dispatch(userAction({\n                                                        id: item.id,\n                                                        first_name: item.first_name,\n                                                        last_name: item.last_name,\n                                                        email: item.email,\n                                                        gender: item.gender,\n                                                        description: item.description,\n\n                                                        editModal: !editModalUser\n                                                    }))}\n                                                >\n                                                    Edit\n                                                </Button>\n                                                <div className=\"vr\" />\n                                                <Button\n                                                    variant=\"danger\"\n                                                    onClick={() => dispatch(userAction({\n                                                        id: item.id,\n\n                                                        deleteModal: !deleteModalUser\n                                                    }))}\n                                                >\n                                                    Delete\n                                                </Button>\n                                            </Stack>\n                                        </td>\n                                        <td>{item.id}</td>\n                                        <td>{item.first_name}</td>\n                                        <td>{item.last_name}</td>\n                                        <td>{item.email}</td>\n                                        <td>{item.gender}</td>\n                                        <td>{item.description}</td>\n                                    </tr>\n                                )}\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </Container>\n\n            {/* add user */}\n\n            <Modal show={addModalUser} onHide={() => dispatch(userAction({ addModal: !addModalUser }))}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add user</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={handleSubmit} id='addUserForm'>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>First name*</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"first_name\"\n                                placeholder=\"\"\n                                value={firstNameUser}\n                                onChange={(event) => dispatch(userAction({ first_name: event.target.value }))}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Last name*</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"last_name\"\n                                placeholder=\"\"\n                                value={lastNameUser}\n                                onChange={(event) => dispatch(userAction({ last_name: event.target.value }))}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder=\"\"\n                                value={emailUser}\n                                onChange={(event) => dispatch(userAction({ email: event.target.value }))}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Gender</Form.Label>\n                            <Form.Check\n                                label=\"Male\"\n                                name=\"male\"\n                                type='radio'\n                                value='male'\n                                checked={genderUser === \"male\"}\n                                onChange={(event) => dispatch(userAction({ gender: event.target.value }))}\n                            />\n                            <Form.Check\n                                label=\"Female\"\n                                name=\"gender\"\n                                type='radio'\n                                value='female'\n                                checked={genderUser === \"female\"}\n                                onChange={(event) => dispatch(userAction({ gender: event.target.value }))}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control\n                                name=\"description\"\n                                as=\"textarea\"\n                                rows={3}\n                                value={descriptionUser}\n                                onChange={(event) => dispatch(userAction({ description: event.target.value }))}\n                            />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"secondary\"\n                        onClick={() => dispatch(userAction({ addModal: !addModalUser }))}\n                    >\n                        Close\n                    </Button>\n                    <Button\n                        type='submit'\n                        form='addUserForm'\n                        variant=\"primary\"\n                    >\n                        Add\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            {/* edit user */}\n\n            <Modal show={editModalUser} onHide={() => dispatch(userAction({ editModal: !editModalUser }))}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit user</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={handleUpdate} id='editUserForm'>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>First name*</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"first_name\"\n                                placeholder=\"\"\n                                value={firstNameUser}\n                                onChange={(event) => dispatch(userAction({ first_name: event.target.value }))}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Last name*</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"last_name\"\n                                placeholder=\"\"\n                                value={lastNameUser}\n                                onChange={(event) => dispatch(userAction({ last_name: event.target.value }))}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder=\"\"\n                                value={emailUser}\n                                onChange={(event) => dispatch(userAction({ email: event.target.value }))}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Gender</Form.Label>\n                            <Form.Check\n                                label=\"Male\"\n                                name=\"male\"\n                                type='radio'\n                                value='male'\n                                checked={genderUser === \"male\"}\n                                onChange={(event) => dispatch(userAction({ gender: event.target.value }))}\n                            />\n                            <Form.Check\n                                label=\"Female\"\n                                name=\"gender\"\n                                type='radio'\n                                value='female'\n                                checked={genderUser === \"female\"}\n                                onChange={(event) => dispatch(userAction({ gender: event.target.value }))}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control\n                                name=\"description\"\n                                as=\"textarea\"\n                                rows={3}\n                                value={descriptionUser}\n                                onChange={(event) => dispatch(userAction({ description: event.target.value }))}\n                            />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"secondary\"\n                        onClick={() => dispatch(userAction({ editModal: !editModalUser }))}\n                    >\n                        Close\n                    </Button>\n                    <Button\n                        type='submit'\n                        form='editUserForm'\n                        variant=\"primary\"\n                    >\n                        Save changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            {/* delete user */}\n\n            <Modal show={deleteModalUser} onHide={() => dispatch(userAction({ deleteModal: !deleteModalUser }))}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Delete user</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Are you sure you want to delete that?\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"secondary\"\n                        onClick={() => dispatch(userAction({ deleteModal: !deleteModalUser }))}\n                    >\n                        No\n                    </Button>\n                    <Button\n                        variant=\"danger\"\n                        onClick={handleDelete}\n                    >\n                        Yes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    )\n}\n\nexport default Users;","/Users/tomas/Documents/GitHub/test-planet-soft/src/pages/Login/Login.jsx",[],[],"/Users/tomas/Documents/GitHub/test-planet-soft/src/redux/actions.js",[],[],"/Users/tomas/Documents/GitHub/test-planet-soft/src/redux/selectors.js",[],[],"/Users/tomas/Documents/GitHub/test-planet-soft/src/hooks/useFormattedData.js",[],[],"/Users/tomas/Documents/GitHub/test-planet-soft/src/api/index.js",[],[],{"ruleId":"65","severity":1,"message":"66","line":111,"column":8,"nodeType":"67","endLine":111,"endColumn":10,"suggestions":"68"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'formatted', 'search', and 'sortBy'. Either include them or remove the dependency array.","ArrayExpression",["69"],{"desc":"70","fix":"71"},"Update the dependencies array to be: [formatted, search, sortBy]",{"range":"72","text":"73"},[3304,3306],"[formatted, search, sortBy]"]